<alloy builddate="2012-09-25 15:54 EDT">

<instance bitwidth="0" maxseq="0" command="Run inst2 for 5 but exactly 2 CallExpr, 2 Function" filename="C:\Users\Linus\Dropbox\ETH\4. Semester\Software Architecture and Engineering\Projects\Project 1\eth-sae-project1\src\task-b\alloy-model.als">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/MainFunction" ID="4" parentID="5" one="yes">
   <atom label="MainFunction$0"/>
</sig>

<sig label="this/Function" ID="5" parentID="2">
   <atom label="Function$0"/>
</sig>

<field label="returnType" ID="6" parentID="5">
   <tuple> <atom label="MainFunction$0"/> <atom label="Type$0"/> </tuple>
   <tuple> <atom label="Function$0"/> <atom label="Type$1"/> </tuple>
   <types> <type ID="5"/> <type ID="7"/> </types>
</field>

<field label="firstStmt" ID="8" parentID="5">
   <tuple> <atom label="MainFunction$0"/> <atom label="VarDecl$0"/> </tuple>
   <tuple> <atom label="Function$0"/> <atom label="ReturnStatement$1"/> </tuple>
   <types> <type ID="5"/> <type ID="9"/> </types>
</field>

<field label="returnStmt" ID="10" parentID="5">
   <tuple> <atom label="MainFunction$0"/> <atom label="ReturnStatement$0"/> </tuple>
   <tuple> <atom label="Function$0"/> <atom label="ReturnStatement$1"/> </tuple>
   <types> <type ID="5"/> <type ID="11"/> </types>
</field>

<field label="formals" ID="12" parentID="5">
   <tuple> <atom label="Function$0"/> <atom label="FormalParameter$0"/> </tuple>
   <types> <type ID="5"/> <type ID="13"/> </types>
</field>

<sig label="this/AssignStatement" ID="14" parentID="9">
   <atom label="AssignStatement$0"/>
</sig>

<field label="assignedTo" ID="15" parentID="14">
   <tuple> <atom label="AssignStatement$0"/> <atom label="Variable$1"/> </tuple>
   <types> <type ID="14"/> <type ID="16"/> </types>
</field>

<field label="assignedValue" ID="17" parentID="14">
   <tuple> <atom label="AssignStatement$0"/> <atom label="CallExpr$1"/> </tuple>
   <types> <type ID="14"/> <type ID="18"/> </types>
</field>

<sig label="this/ReturnStatement" ID="11" parentID="9">
   <atom label="ReturnStatement$0"/>
   <atom label="ReturnStatement$1"/>
</sig>

<field label="returnValue" ID="19" parentID="11">
   <tuple> <atom label="ReturnStatement$0"/> <atom label="VariableReference$0"/> </tuple>
   <tuple> <atom label="ReturnStatement$1"/> <atom label="VariableReference$1"/> </tuple>
   <types> <type ID="11"/> <type ID="18"/> </types>
</field>

<sig label="this/VarDecl" ID="20" parentID="9">
   <atom label="VarDecl$0"/>
</sig>

<field label="declaredVar" ID="21" parentID="20">
   <tuple> <atom label="VarDecl$0"/> <atom label="Variable$1"/> </tuple>
   <types> <type ID="20"/> <type ID="16"/> </types>
</field>

<field label="type" ID="22" parentID="20">
   <tuple> <atom label="VarDecl$0"/> <atom label="Type$1"/> </tuple>
   <types> <type ID="20"/> <type ID="7"/> </types>
</field>

<sig label="this/Statement" ID="9" parentID="2" abstract="yes">
</sig>

<field label="predecessor" ID="23" parentID="9">
   <tuple> <atom label="ReturnStatement$0"/> <atom label="AssignStatement$0"/> </tuple>
   <tuple> <atom label="AssignStatement$0"/> <atom label="VarDecl$0"/> </tuple>
   <types> <type ID="9"/> <type ID="9"/> </types>
</field>

<field label="successor" ID="24" parentID="9">
   <tuple> <atom label="VarDecl$0"/> <atom label="AssignStatement$0"/> </tuple>
   <tuple> <atom label="AssignStatement$0"/> <atom label="ReturnStatement$0"/> </tuple>
   <types> <type ID="9"/> <type ID="9"/> </types>
</field>

<sig label="this/FormalParameter" ID="13" parentID="2">
   <atom label="FormalParameter$0"/>
</sig>

<field label="declaredVar" ID="25" parentID="13">
   <tuple> <atom label="FormalParameter$0"/> <atom label="Variable$0"/> </tuple>
   <types> <type ID="13"/> <type ID="16"/> </types>
</field>

<field label="type" ID="26" parentID="13">
   <tuple> <atom label="FormalParameter$0"/> <atom label="Type$1"/> </tuple>
   <types> <type ID="13"/> <type ID="7"/> </types>
</field>

<sig label="this/CallExpr" ID="27" parentID="18">
   <atom label="CallExpr$0"/>
   <atom label="CallExpr$1"/>
</sig>

<field label="function" ID="28" parentID="27">
   <tuple> <atom label="CallExpr$0"/> <atom label="Function$0"/> </tuple>
   <tuple> <atom label="CallExpr$1"/> <atom label="Function$0"/> </tuple>
   <types> <type ID="27"/> <type ID="5"/> </types>
</field>

<field label="actuals" ID="29" parentID="27">
   <tuple> <atom label="CallExpr$0"/> <atom label="Literal$0"/> <atom label="FormalParameter$0"/> </tuple>
   <tuple> <atom label="CallExpr$1"/> <atom label="CallExpr$0"/> <atom label="FormalParameter$0"/> </tuple>
   <types> <type ID="27"/> <type ID="18"/> <type ID="13"/> </types>
</field>

<sig label="this/Literal" ID="30" parentID="18">
   <atom label="Literal$0"/>
</sig>

<sig label="this/VariableReference" ID="31" parentID="18">
   <atom label="VariableReference$0"/>
   <atom label="VariableReference$1"/>
</sig>

<field label="referredVar" ID="32" parentID="31">
   <tuple> <atom label="VariableReference$0"/> <atom label="Variable$1"/> </tuple>
   <tuple> <atom label="VariableReference$1"/> <atom label="Variable$0"/> </tuple>
   <types> <type ID="31"/> <type ID="16"/> </types>
</field>

<sig label="this/Expr" ID="18" parentID="2" abstract="yes">
</sig>

<field label="parent" ID="33" parentID="18">
   <tuple> <atom label="CallExpr$0"/> <atom label="CallExpr$1"/> </tuple>
   <tuple> <atom label="Literal$0"/> <atom label="CallExpr$0"/> </tuple>
   <types> <type ID="18"/> <type ID="18"/> </types>
</field>

<field label="children" ID="34" parentID="18">
   <tuple> <atom label="CallExpr$0"/> <atom label="Literal$0"/> </tuple>
   <tuple> <atom label="CallExpr$1"/> <atom label="CallExpr$0"/> </tuple>
   <types> <type ID="18"/> <type ID="18"/> </types>
</field>

<field label="type" ID="35" parentID="18">
   <tuple> <atom label="CallExpr$0"/> <atom label="Type$1"/> </tuple>
   <tuple> <atom label="CallExpr$1"/> <atom label="Type$1"/> </tuple>
   <tuple> <atom label="VariableReference$0"/> <atom label="Type$1"/> </tuple>
   <tuple> <atom label="VariableReference$1"/> <atom label="Type$1"/> </tuple>
   <tuple> <atom label="Literal$0"/> <atom label="Type$1"/> </tuple>
   <types> <type ID="18"/> <type ID="7"/> </types>
</field>

<sig label="this/Type" ID="7" parentID="2">
   <atom label="Type$0"/>
   <atom label="Type$1"/>
</sig>

<field label="supertype" ID="36" parentID="7">
   <tuple> <atom label="Type$1"/> <atom label="Type$0"/> </tuple>
   <types> <type ID="7"/> <type ID="7"/> </types>
</field>

<field label="subtypes" ID="37" parentID="7">
   <tuple> <atom label="Type$0"/> <atom label="Type$1"/> </tuple>
   <types> <type ID="7"/> <type ID="7"/> </types>
</field>

<sig label="this/Variable" ID="16" parentID="2">
   <atom label="Variable$0"/>
   <atom label="Variable$1"/>
</sig>

<sig label="univ" ID="2" builtin="yes">
</sig>

<skolem label="$this/p_expressionTypes" ID="m1">
   <tuple> <atom label="Type$1"/> </tuple>
   <types> <type ID="7"/> </types>
</skolem>

<skolem label="$this/p_literalTypes" ID="m2">
   <tuple> <atom label="Type$1"/> </tuple>
   <types> <type ID="7"/> </types>
</skolem>

<skolem label="$this/functions" ID="m3">
   <tuple> <atom label="MainFunction$0"/> <atom label="Function$0"/> </tuple>
   <types> <type ID="5"/> <type ID="5"/> </types>
</skolem>

<skolem label="$this/statements" ID="m4">
   <tuple> <atom label="MainFunction$0"/> <atom label="VarDecl$0"/> </tuple>
   <tuple> <atom label="MainFunction$0"/> <atom label="ReturnStatement$0"/> </tuple>
   <tuple> <atom label="MainFunction$0"/> <atom label="AssignStatement$0"/> </tuple>
   <tuple> <atom label="Function$0"/> <atom label="ReturnStatement$1"/> </tuple>
   <types> <type ID="5"/> <type ID="9"/> </types>
</skolem>

<skolem label="$this/exprs" ID="m5">
   <tuple> <atom label="ReturnStatement$0"/> <atom label="VariableReference$0"/> </tuple>
   <tuple> <atom label="ReturnStatement$1"/> <atom label="VariableReference$1"/> </tuple>
   <tuple> <atom label="AssignStatement$0"/> <atom label="CallExpr$1"/> </tuple>
   <types> <type ID="9"/> <type ID="18"/> </types>
</skolem>

<skolem label="$this/reads" ID="m6">
   <tuple> <atom label="VariableReference$0"/> <atom label="Variable$1"/> </tuple>
   <tuple> <atom label="VariableReference$1"/> <atom label="Variable$0"/> </tuple>
   <types> <type ID="18"/> <type ID="16"/> </types>
</skolem>

</instance>

<source filename="C:\Users\Linus\Dropbox\ETH\4. Semester\Software Architecture and Engineering\Projects\Project 1\eth-sae-project1\src\task-b\alloy-model.als" content="// ---------- Instances for task C --------------------------------------------------- //&#x000a;&#x000a;pred inst1 {} // NOT feasible, no recursions allowed&#x000a;run inst1 for 5 but exactly 2 CallExpr, 1 Function&#x000a;&#x000a;pred inst2 {}&#x000a;run inst2 for 5 but exactly 2 CallExpr, 2 Function&#x000a;&#x000a;pred inst3 {&#x000a;  one AssignStatement&#x000a;  one Literal&#x000a;  one Variable&#x000a;}&#x000a;run inst3&#x000a;&#x000a;pred inst4 {&#x000a;  some a: AssignStatement, ce: a.assignedValue {&#x000a;    ce in CallExpr&#x000a;    all vd: VarDecl | p_assignsTo[a, vd] implies disj[ce.function.returnStmt.returnValue.type, ce.function.returnType, vd.type]&#x000a;  }&#x000a;}&#x000a;run inst4 for 5 but exactly 1 CallExpr&#x000a;&#x000a;pred inst5 {&#x000a;  one Literal&#x000a;  all disj t1, t2: Type | t1 != t2.supertype&#x000a;}&#x000a;run inst5 for 5 but exactly 2 Type&#x000a;&#x000a;// ---------- Static Model of task B -------------------------------------------------- //&#x000a;&#x000a;pred show {}&#x000a;run show for 5&#x000a;&#x000a;/* --------------------------------------------------------------------------------&#x000a; * Signatures&#x000a; * -------------------------------------------------------------------------------- */&#x000a;&#x000a;sig Function {&#x000a;  returnType: one Type, // Functions have a return type.&#x000a;  firstStmt: disj one Statement,&#x000a;  returnStmt: disj one ReturnStatement, // Each function execution must be terminated by a return statement.&#x000a;  formals: disj set FormalParameter, // Functions have a set (may be zero) of formal parameters with types.&#x000a;}&#x000a;&#x000a;one sig MainFunction extends Function {}&#x000a;&#x000a;abstract sig Statement {&#x000a;  predecessor: disj lone Statement,&#x000a;  successor: disj lone Statement,&#x000a;}&#x000a;&#x000a;sig AssignStatement extends Statement {&#x000a;  assignedTo: one Variable, // writes value &quot;directly&quot; to the variable&#x000a;  assignedValue: disj one Expr,&#x000a;}&#x000a;&#x000a;sig ReturnStatement extends Statement {&#x000a;  returnValue: disj one Expr, // A return statement carries an expression that defines which value is returned by the function.&#x000a;}&#x000a;&#x000a;sig VarDecl extends Statement {&#x000a;  declaredVar: disj one Variable, // the variable can&apos;t be evalutated to a value yet and is therefore not seen as an expression&#x000a;  type: one Type, // Declaration statements declare variables of a specific type.&#x000a;}&#x000a;&#x000a;sig FormalParameter {&#x000a;  declaredVar: disj one Variable,&#x000a;  type: one Type,&#x000a;}&#x000a;&#x000a;abstract sig Expr {&#x000a;  parent: lone Expr,&#x000a;  children: disj set Expr, // may have zero direct children&#x000a;  type: one Type, // Expressions are typically associated with a type.&#x000a;}&#x000a;&#x000a;sig CallExpr extends Expr {&#x000a;  function: one Function, // A function can be called in a corresponding call expression.&#x000a;  actuals: Expr lone -&gt; lone FormalParameter, // A call expression is assiociated with a set of expressions that serve as actual parameters and are mapped to formal parameters.&#x000a;}&#x000a;&#x000a;sig Literal extends Expr {} // We do not model the value of literals.&#x000a;&#x000a;sig VariableReference extends Expr {&#x000a;  referredVar: one Variable, // reads value from the variable&#x000a;}&#x000a;&#x000a;sig Type {&#x000a;  supertype: lone Type, // Each type can have up to one supertype.&#x000a;  subtypes: disj set Type,&#x000a;}&#x000a;&#x000a;sig Variable {}&#x000a;&#x000a;/* --------------------------------------------------------------------------------&#x000a; * Facts (Static Model)&#x000a; * -------------------------------------------------------------------------------- */&#x000a;&#x000a;// Functions consist of a linear sequence of statements.&#x000a;fact {&#x000a;  (predecessor = ~successor) &amp;&amp;&#x000a;  (Function.statements = Statement) &amp;&amp; // all statements belong to a function&#x000a;  (no firstStmt.predecessor) &amp;&amp; // the first statement has no predecessor&#x000a;  (all f: Function | f.returnStmt in p_statementsInFunction[f]) &amp;&amp;&#x000a;  (no ReturnStatement.successor) // A function may not contain unreachable statements. i.e. the return statement has no successor statement.&#x000a;}&#x000a;&#x000a;// Expressions are typically associated with a type.&#x000a;fact {&#x000a;  (all ce: CallExpr | ce.type = ce.function.returnType) &amp;&amp; // The type of a call expression is equal to the return type of the function.&#x000a;  (all vr: VariableReference | all vd: VarDecl | (vr.referredVar = vd.declaredVar) implies vr.type = vd.type) &amp;&amp;&#x000a;  (all vr: VariableReference | all fp: FormalParameter | (vr.referredVar = fp.declaredVar) implies vr.type = fp.type)&#x000a;}&#x000a;&#x000a;// Functions have a set of formal parameters.&#x000a;fact {&#x000a;  Function.formals = FormalParameter // all formal parameters belong to a function&#x000a;}&#x000a;&#x000a;// Actual parameters are mapped to formal parameters.&#x000a;fact {&#x000a;  all ce: CallExpr | ce.actuals[Expr] = ce.function.formals&#x000a;}&#x000a;&#x000a;// Recursion is not allowed.&#x000a;fact {&#x000a;  no f: Function | f in f.^functions&#x000a;}&#x000a;&#x000a;// There is one main function that takes no parameters.&#x000a;fact {&#x000a;  no MainFunction.formals&#x000a;}&#x000a;&#x000a;// There is one main function from which all other functions are transitively called.&#x000a;fact {&#x000a;  Function in MainFunction.*functions&#x000a;}&#x000a;&#x000a;// Variables are declared exactly once, either in a corresponding declaration statement or as function parameter.&#x000a;fact {&#x000a;  all v: Variable | p_isDeclared[v]&#x000a;}&#x000a;&#x000a;// A variable that has been declared can be assigned to using an assignment statement.&#x000a;fact {&#x000a;  all vd: VarDecl | all a: AssignStatement | p_assignsTo[a, vd] implies (a in p_statementsAfter[vd])&#x000a;}&#x000a;&#x000a;// Once the variable has been assigned to, it can be used in expressions in subsequent statements.&#x000a;fact {&#x000a;  all s: Statement | all v: s.exprs.reads | !p_isParameter[v] implies some a: AssignStatement | (v = a.assignedTo) &amp;&amp; (s in p_statementsAfter[a])&#x000a;}&#x000a;&#x000a;// We do not allow dead variables (variables that are never read).&#x000a;fact {&#x000a;  all v: Variable | p_isRead[v]&#x000a;}&#x000a;&#x000a;// We do not allow dead assignments (assignments that are not followed by a read of the variable).&#x000a;fact {&#x000a;//  all a: AssignStatement | a.assignedTo in p_statementsAfter[a].exprs.reads // assignment is followed by any read of the variable, not necessary the assigned value&#x000a;  all a: AssignStatement, v: a.assignedTo | some s: p_statementsAfter[a] | v in s.exprs.reads &amp;&amp; (no s&apos;: (p_statementsAfter[a] - p_statementsAfter[s]) | v= s&apos;.assignedTo)&#x000a;}&#x000a;&#x000a;// Parameters should never be assigned to.&#x000a;fact {&#x000a;  all v: Variable | p_isParameter[v] implies (!p_isAssigned[v])&#x000a;}&#x000a;&#x000a;// Variables (declared either by a VarDecl or as FormalParameter) are local to a function&#x000a;fact {&#x000a;  all disj f1, f2: Function | disj[f1.statements.exprs.reads, f2.(statements.exprs.reads + formals.declaredVar)]&#x000a;}&#x000a;&#x000a;// Expressions form trees, and nodes of expression trees are never shared, i.e. every node has a unique parent.&#x000a;fact {&#x000a;  (parent = ~children) &amp;&amp; (no e: Expr | e in e.^children) &amp;&amp; // parent/children relationship has no cycles&#x000a;  ((Statement.exprs + Expr.children) = Expr) &amp;&amp; // all expressions have a parent&#x000a;  (no (Statement.exprs &amp; Expr.children)) &amp;&amp; (no (Statement.assignedValue &amp; Statement.returnValue)) &amp;&amp; // parents are unique&#x000a;  (children = actuals.FormalParameter)&#x000a;}&#x000a;&#x000a;// The usual typing rules apply to assignments, function calls and return statements.&#x000a;fact {&#x000a;  (supertype = ~subtypes) &amp;&amp; (no t: Type | t in t.^subtypes) &amp;&amp; // supertye/subtypes relationship has no cycles&#x000a;  ((Function.returnType + VarDecl.type + FormalParameter.type + p_expressionTypes) = Type) &amp;&amp; // all types are used&#x000a;  (all a: AssignStatement | all vd: VarDecl | p_assignsTo[a, vd] implies p_subtypeOf[a.assignedValue.type, vd.type]) &amp;&amp;&#x000a;  (all e: Expr, fp: FormalParameter | (e-&gt;fp in CallExpr.actuals) implies p_subtypeOf[e.type, fp.type]) &amp;&amp;&#x000a;  (all f: Function | p_subtypeOf[f.returnStmt.returnValue.type, f.returnType])&#x000a;}&#x000a;&#x000a;/* --------------------------------------------------------------------------------&#x000a; * Functions (Static Model)&#x000a; * -------------------------------------------------------------------------------- */&#x000a;&#x000a;// Returns the number of function calls (call expressions) in the program.&#x000a;fun p_numFunctionCalls: Int {&#x000a;  #CallExpr&#x000a;}&#x000a;&#x000a;// Returns the types of all expressions.&#x000a;fun p_expressionTypes: set Type {&#x000a;  Expr.type&#x000a;}&#x000a;&#x000a;// Returns the types of all literals.&#x000a;fun p_literalTypes: set Type {&#x000a;  Literal.type&#x000a;}&#x000a;&#x000a;// Returns all statements directly contained in the body of a function.&#x000a;fun p_statementsInFunction [f: Function]: set Statement {&#x000a;  f.statements&#x000a;}&#x000a;&#x000a;// Returns all statements contained after s in the same function.&#x000a;fun p_statementsAfter [s: Statement]: set Statement {&#x000a;  s.^successor&#x000a;}&#x000a;&#x000a;// Returns the formal parameters of function f.&#x000a;fun p_parameters [f: Function]: set FormalParameter {&#x000a;  f.formals&#x000a;}&#x000a;&#x000a;// Returns the direct subexpressions of e.&#x000a;fun p_subExprs [e: Expr]: set Expr {&#x000a;  e.children&#x000a;}&#x000a;&#x000a;/* --------------------------------------------------------------------------------&#x000a; * Predicates (Static Model)&#x000a; * -------------------------------------------------------------------------------- */&#x000a;&#x000a;// true iff f contains a function call directly in its body.&#x000a;pred p_containsCall [f: Function] {&#x000a;  some p_statementsInFunction[f].exprs.*children :&gt; CallExpr&#x000a;}&#x000a;&#x000a;// true iff v appears on the left side of an assignment anywhere in the program.&#x000a;pred p_isAssigned [v: Variable] {&#x000a;  v in AssignStatement.assignedTo&#x000a;}&#x000a;&#x000a;// true iff v appears in an expression anywhere in the program. Exclude writes.&#x000a;pred p_isRead [v: Variable] {&#x000a;  v in VariableReference.referredVar&#x000a;}&#x000a;&#x000a;// true iff v is declared exactly once.&#x000a;pred p_isDeclared [v: Variable] {&#x000a;  (v in (VarDecl.declaredVar + FormalParameter.declaredVar)) &amp;&amp; // at least once&#x000a;  (v not in (VarDecl.declaredVar &amp; FormalParameter.declaredVar)) // at most once&#x000a;}&#x000a;&#x000a;// true iff v is declared as a parameter.&#x000a;pred p_isParameter [v: Variable] {&#x000a;  v in FormalParameter.declaredVar&#x000a;}&#x000a;&#x000a;// true iff t1 is a subtype of t2. Returns true if types are equal.&#x000a;pred p_subtypeOf [t1: Type, t2: Type] {&#x000a;  t2 in t1.*supertype&#x000a;}&#x000a;&#x000a;// true iff s assigns to the variable declared by vd.&#x000a;pred p_assignsTo [s: Statement, vd: VarDecl] {&#x000a;  s.assignedTo = vd.declaredVar&#x000a;}&#x000a;&#x000a;/* --------------------------------------------------------------------------------&#x000a; * Additional Relations (Static Model)&#x000a; * -------------------------------------------------------------------------------- */&#x000a;&#x000a;// Returns tuples of the form (caller, callee): (Function, Function), i.e. the function &apos;caller&apos; calls the function &apos;calle&apos; in its body.&#x000a;fun functions: set Function -&gt; Function {&#x000a;  (statements.exprs.*children :&gt; CallExpr).function&#x000a;}&#x000a;&#x000a;// Returns tuples of functions and their statements.&#x000a;fun statements: set Function -&gt; Statement {&#x000a;  firstStmt.*successor&#x000a;}&#x000a;&#x000a;// Returns tuples of statements and their direct subexpressions.&#x000a;fun exprs: set Statement -&gt; Expr {&#x000a;  assignedValue + returnValue&#x000a;}&#x000a;&#x000a;// Returns tuples of expressions and the variables they read.&#x000a;fun reads: set Expr -&gt; Variable {&#x000a;  *children.referredVar&#x000a;}&#x000a;"/>

<source filename="\$alloy4$\models\util\integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

</alloy>
